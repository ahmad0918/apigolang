// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Ahmad Hilmy Muflih",
            "email": "ahmadhilmy0918123@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/healthcheck/config": {
            "get": {
                "description": "Retrieve the configuration for the health check endpoint, including the path, method, and status codes.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health Check"
                ],
                "summary": "Get Health Check Configuration",
                "responses": {
                    "200": {
                        "description": "Health check configuration",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "$ref": "#/definitions/healthcheck.CheckStatus"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.InternalErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthcheck/database": {
            "get": {
                "description": "Retrieve the health status of the database connections, returning the status of each connection.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health Check"
                ],
                "summary": "Check Database Health Status",
                "responses": {
                    "200": {
                        "description": "All DB Connection Found and Ready",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SuccessResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "result": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/healthcheck.DBJson"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "503": {
                        "description": "Some Services are Down",
                        "schema": {
                            "$ref": "#/definitions/models.ServiceUnavailableResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "healthcheck.CheckStatus": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Service Apigolang"
                },
                "pass": {
                    "type": "boolean",
                    "example": true
                },
                "responsiveness": {
                    "type": "string",
                    "example": "Success hit api golang"
                }
            }
        },
        "healthcheck.DBJson": {
            "type": "object",
            "properties": {
                "dbName": {
                    "type": "string",
                    "example": "Golang"
                },
                "dbStatus": {
                    "type": "string",
                    "example": "Database Golang is not ready"
                }
            }
        },
        "models.InternalErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Internal server error"
                },
                "response": {
                    "type": "integer",
                    "example": 500
                },
                "result": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "models.ServiceUnavailableResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Service Unavailable"
                },
                "response": {
                    "type": "integer",
                    "example": 503
                },
                "result": {
                    "type": "string",
                    "example": ""
                }
            }
        },
        "models.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Operation successful"
                },
                "response": {
                    "type": "integer",
                    "example": 200
                },
                "result": {
                    "type": "object"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/golang/public",
	Schemes:          []string{"http"},
	Title:            "APIGOLANG",
	Description:      "This is a sample server for Apigolang application.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
